{"version":3,"sources":["game/audioBufferLoader.js"],"names":[],"mappings":";;;;;;;;;;;;;;IAIM,iBAAiB;AAER,aAFT,iBAAiB,CAEP,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE;8BAFtC,iBAAiB;;AAGf,YAAI,CAAC,OAAO,GAAG,OAAO,CAAC;AACvB,YAAI,CAAC,OAAO,GAAG,OAAO,CAAC;AACvB,YAAI,CAAC,MAAM,GAAG,QAAQ,CAAC;AACvB,YAAI,CAAC,UAAU,GAAG,EAAE,CAAC;AACrB,YAAI,CAAC,SAAS,GAAG,CAAC,CAAC;KACtB;;iBARC,iBAAiB;;eAUT,oBAAC,GAAG,EAAE,KAAK,EAAE;;AAEnB,gBAAI,OAAO,GAAG,IAAI,cAAc,EAAE,CAAC;AACnC,mBAAO,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;AAC/B,mBAAO,CAAC,YAAY,GAAG,aAAa,CAAC;;AAErC,gBAAI,gBAAgB,GAAG,IAAI,CAAC;;AAE5B,mBAAO,CAAC,MAAM,GAAG,YAAY;;;AAGzB,gCAAgB,CAAC,OAAO,CAAC,eAAe,CACpC,OAAO,CAAC,QAAQ,EAChB,UAAU,MAAM,EAAE;AACd,wBAAI,CAAC,MAAM,EAAE;AACT,+BAAO,CAAC,KAAK,CAAC,4BAA4B,GAAG,GAAG,CAAC,CAAC;AAClD,+BAAO;qBACV;AACD,oCAAgB,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC;AAC5C,wBAAI,EAAE,gBAAgB,CAAC,SAAS,IAAI,gBAAgB,CAAC,OAAO,CAAC,MAAM,EAC/D,gBAAgB,CAAC,MAAM,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;iBAC5D,EACD,UAAU,KAAK,EAAE;AACb,2BAAO,CAAC,KAAK,CAAC,uBAAuB,EAAE,KAAK,CAAC,CAAC;iBACjD,CACJ,CAAC;aACL,CAAC;;AAEF,mBAAO,CAAC,OAAO,GAAG,YAAY;AAC1B,uBAAO,CAAC,KAAK,CAAC,yBAAyB,CAAC,CAAC;aAC5C,CAAC;;AAEF,mBAAO,CAAC,IAAI,EAAE,CAAC;SAClB;;;eAEG,gBAAG;AACH,iBAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;;AAE1C,oBAAI,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;aACvC;SACJ;;;WAlDC,iBAAiB;;;qBAqDR,iBAAiB","file":"game/audioBufferLoader.js","sourcesContent":["/**\n * Created by andrew on 3/28/15.\n */\n\nclass AudioBufferLoader {\n\n    constructor(context, urlList, callback) {\n        this.context = context;\n        this.urlList = urlList;\n        this.onload = callback;\n        this.bufferList = [];\n        this.loadCount = 0;\n    }\n\n    loadBuffer(url, index) {\n        // Load buffer asynchronously\n        var request = new XMLHttpRequest();\n        request.open(\"GET\", url, true);\n        request.responseType = \"arraybuffer\";\n\n        var thisBufferLoader = this;\n\n        request.onload = function () {\n            // Asynchronously decode the audio file data in request.response\n            //console.log(\"onLoad: \" + index);\n            thisBufferLoader.context.decodeAudioData(\n                request.response,\n                function (buffer) {\n                    if (!buffer) {\n                        console.error('error decoding file data: ' + url);\n                        return;\n                    }\n                    thisBufferLoader.bufferList[index] = buffer;\n                    if (++thisBufferLoader.loadCount == thisBufferLoader.urlList.length)\n                        thisBufferLoader.onload(thisBufferLoader.bufferList);\n                },\n                function (error) {\n                    console.error('decodeAudioData error', error);\n                }\n            );\n        };\n\n        request.onerror = function () {\n            console.error('BufferLoader: XHR error');\n        };\n\n        request.send();\n    }\n\n    load() {\n        for (var i = 0; i < this.urlList.length; ++i) {\n            //console.log(\"load: \" + this.urlList[i]);\n            this.loadBuffer(this.urlList[i], i);\n        }\n    }\n}\n\nexport default AudioBufferLoader;\n"],"sourceRoot":"/source/"}